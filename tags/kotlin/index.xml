<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kotlin on Today I Learned</title>
    <link>https://today.countableset.com/tags/kotlin/</link>
    <description>Recent content in kotlin on Today I Learned</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 17 Aug 2020 16:57:06 -0700</lastBuildDate>
    
	<atom:link href="https://today.countableset.com/tags/kotlin/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2020 08 17</title>
      <link>https://today.countableset.com/posts/2020-08-17/</link>
      <pubDate>Mon, 17 Aug 2020 16:57:06 -0700</pubDate>
      
      <guid>https://today.countableset.com/posts/2020-08-17/</guid>
      <description>Validations in Spring in Kotlin  @UniqueName data class CreateRequest( val id: String = &amp;quot;&amp;quot;, @get:NotBlank(message = &amp;quot;{req.name.blank}&amp;quot;) val name: String = &amp;quot;&amp;quot;, @get:NotBlank(message = &amp;quot;{req.description.blank}&amp;quot;) val description: String = &amp;quot;&amp;quot;, @get:Valid val nested: NestedClass = NestedClass(&amp;quot;&amp;quot;, &amp;quot;&amp;quot;), ) data class NestedClass( @get:NotBlank(message = &amp;quot;{req.nested.something.blank}&amp;quot;) val something: String, @get:NotBlank(message = &amp;quot;{req.nested.something_else.blank}&amp;quot;) val somethingElse: String ) @Target(AnnotationTarget.CLASS) @Retention(AnnotationRetention.RUNTIME) @Constraint(validatedBy = [UniqueNameValidator::class]) annotation class UniqueName( val message: String = &amp;quot;&amp;quot;, val groups: Array&amp;lt;KClass&amp;lt;*&amp;gt;&amp;gt; = [], val payload: Array&amp;lt;KClass&amp;lt;out Payload&amp;gt;&amp;gt; = [] ) class UniqueNameValidator( private val sampleService: SampleService ) : ConstraintValidator&amp;lt;UniqueName, CreateRequest&amp;gt; { override fun isValid(request: CreateRequest, context: ConstraintValidatorContext): Boolean { val dupSample = sampleService.</description>
    </item>
    
  </channel>
</rss>